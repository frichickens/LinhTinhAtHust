# EX4
.data
	maxText: .asciz "Max value is: "
	minText: .asciz "Min value is: "
	endl: .asciz "\n"
.text

# read input N
li a7, 5
ecall
# save N to t0
c.addi t0, a0, 0

# let MIN(x1) and MAX(x2) Riscv interger
c.li x1, 0x7FFF # postive (MIN)
c.li x2, 0x8000 # negative (MAX)
    
loop:
	# read each input
	li a7, 5
	ecall
	
	c.addi t0,t0, -1
	
	# save input to t1
	c.addi t1, a0, 0
	# n[i] > max => n[i] = max
	c.bgez t1, x2, findMax 
contMax:
	# n[i] < min => n[i] = min
	c.bltz t1, x1, findMin 
contMin:
	c.bnez t0,zero, loop
	c.j exit

findMax:
	c.addi x2, t1, 0
	c.j contMax

findMin:
	c.addi x1, t1, 0
	c.j contMin
exit:
# Print Min
li a7,4
la a0, minText
ecall
c.addi a0, x1, 0
li a7, 1
ecall

# Endline
li a7,4
la a0, endl
ecall

# Print Max
li a7,4
la a0, maxText
ecall
c.addi a0, x2, 0
li a7, 1
ecall

########################################

#EX5

.data
	text1st: .asciz "First Number: "
	text2nd: .asciz "Second Number: "
	resText: .asciz "Average is: "
	endl: .asciz "\n"
.text

# t0 = 2
c.addi t0, zero, 2

takeInput:
	# read 1st input
	li a7, 4
	la a0, text1st
	ecall
	li a7, 5
	ecall
	c.addi t1, a0, 0

	# read 2nd input
	li a7, 4
	la a0, text2nd
	ecall
	li a7, 5
	ecall
	c.addi t2, a0, 0
	
	# t3 = t1 + t2
	add t3, t1, t2
	
	# if a and b = 0, Exit
	c.or t4, t1, t2
	c.beq t4, zero, Exit
	
	c.jal AVG
	c.j takeInput

AVG:
	fcvt.s.w f1, t3	# f1 = (float) t1 + t2
    	fcvt.s.w f2, t0	# f2 = (float) 2
    	
    	fdiv.s fa0, f1, f2 # fa0 = (t1+t2) / 2
    	
    	# output text
    	li a7, 4
	la a0, resText
	ecall
	
    	li a7, 2
    	ecall
    	
    	li a7, 4
	la a0, endl
	ecall
    	
    	c.jalr ra
    	
Exit: